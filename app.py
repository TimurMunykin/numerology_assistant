import os
import logging
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import filters, ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler
from dotenv import load_dotenv

from src.find import get_answer

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

user_debug_modes = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_answer_indexes = {}
answers = None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        parse_mode=telegram.constants.ParseMode.MARKDOWN_V2,
        text='''
üëã –ü—Ä–∏–≤–µ—Ç\! –Ø \- –±–æ—Ç\-–Ω—É–º–µ—Ä–æ–ª–æ–≥, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤—ã–º —Ç–∞–π–Ω–∞–º\!
–ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
```
–ö–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —É–¥–∞—á–∏ —É —á–µ–ª–æ–≤–µ–∫–∞ —Å —á–∏—Å–ª–æ–º –∂–∏–∑–Ω–µ–Ω–æ–≥–æ –ø—É—Ç–∏ 4
```

```
–ö–∞–∫–∞—è —É –º–µ–Ω—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
```

```
–î–∞–π –º–Ω–µ –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–º–µ—Ä –¥—É—à–∏
```
–Ø –≥–æ—Ç–æ–≤ —É–¥–∏–≤–ª—è—Ç—å —Ç–µ–±—è –æ—Ç–≤–µ—Ç–∞–º–∏\! ‚ú®
'''
    )
    """Sends a message with three inline buttons attached."""


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global answers
    user_id = update.effective_user.id
    user_answer_indexes[user_id] = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

    await context.bot.send_message(chat_id=update.effective_chat.id, text='ü§î –î–∞–π –º–Ω–µ —Å–µ–∫—É–Ω–¥–æ—á–∫—É, —è –ø–æ–¥—É–º–∞—é...')

    try:
        api_key = os.getenv('OPEN_AI_API_KEY')
        answers = get_answer(question=update.message.text, api_key=api_key)
        await send_answers(update, context, user_id)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤

    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f'–û—à–∏–±–∫–∞: {e}')


async def send_answers(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    global answers
    start_index = user_answer_indexes.get(user_id, 0)
    end_index = min(start_index + 5, len(answers))

    for index in range(start_index, end_index):
        answer = answers.iloc[index]
        button = InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ—Ç–æ–¥–∏–∫—É", callback_data=f"{index}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=answer.topicText, reply_markup=InlineKeyboardMarkup([[button]]))

    if end_index < len(answers):
        next_button = InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ 5 –º–µ—Ç–æ–¥–∏–∫", callback_data=f"next_{end_index}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–ï—Å—Ç—å –µ—â–µ –º–µ—Ç–æ–¥–∏–∫–∏. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.',
            reply_markup=InlineKeyboardMarkup([[next_button]])
        )

    user_answer_indexes[user_id] = end_index


async def enable_debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_debug_modes[user_id] = True
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"Debug mode *enabled* for you\.",
        parse_mode=telegram.constants.ParseMode.MARKDOWN_V2
    )


async def disable_debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_debug_modes[user_id] = False
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"Debug mode *disabled* for you\.",
        parse_mode=telegram.constants.ParseMode.MARKDOWN_V2
    )


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global answers
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    if query.data.startswith("next_"):
        next_index = int(query.data.split("_")[1])
        user_answer_indexes[user_id] = next_index
        await send_answers(update, context, user_id)
    else:
        index = int(query.data)
        answer = answers.iloc[index]
        await query.edit_message_text(text=f"{answer.topicText}: {answer.topicNotes}")


def main():
    load_dotenv()
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    application = ApplicationBuilder().token(token).build()

    start_handler = CommandHandler('start', start)
    message_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message)
    enable_debug_handler = CommandHandler('enable_debug', enable_debug)
    disable_debug_handler = CommandHandler('disable_debug', disable_debug)

    application.add_handler(start_handler)
    application.add_handler(message_handler)
    application.add_handler(enable_debug_handler)
    application.add_handler(disable_debug_handler)
    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()


main()
